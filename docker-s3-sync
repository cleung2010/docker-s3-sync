#!/usr/bin/env ruby

# A convenience script for running docker S3 sync containers

require 'optparse'

options = {
  :image => 'kickstarter/docker-s3-sync:0.5.3'
}

optparse = OptionParser.new do |opts|
  opts.banner = %Q{
  Copy a file from S3 to the local host.
  Usage: #{$0} -b S3_BUCKET -k KEY [--interval INTERVAL] [--mode MODE] DESTINATION"
  }

  opts.on("-d", "--dryrun", "Output command instead of exec'ing") { |o| options[:dryrun] = o }
  opts.on("-b", "--bucket S3_BUCKET", "S3 Bucket [required]") { |o| options[:bucket] = o }
  opts.on("-k", "--key S3_KEY", "S3 Key [required]") { |o| options[:key] = o }
  opts.on("-m", "--mode MODE", "File mode of destination [optional]") { |o| options[:mode] = o }
  opts.on("-i INTERVAL", "--interval INTERVAL", "Run in a loop every INTERVAL seconds [optional, default: run once]") { |o| options[:interval] = o }
  opts.on("--image IMAGE", "Docker image to use [optional, default: #{options[:image]}]") { |o| options[:image] = o }
  opts.on("-u UID", "--owner-uid UID", "UID of the user to own destination file [optional, default: 0]") { |o| options[:user] = o }
  opts.on("-g GID", "--owner-gid GID", "GID of the group to own the destination file [optional, default: UID]") { |o| options[:group] = o }
  opts.on("--name NAME", "Name of the docker container [optional]") { |o| options[:name] = o }
end
optparse.parse!

options[:destination] = ARGV[0] unless ARGV.empty?

required_options = [:bucket, :key, :destination]
unless (required_options & options.keys) == required_options
  puts "Missing required options: #{required_options - options.keys}"
  puts optparse
  exit 1
end

# Destination like /root/.ssh/authorized_keys becomes /out/authorized_keys
destination = File.join("/out", File.basename(options[:destination]))
# Map destination dir on host to /out in containter
volume = "#{File.dirname(options[:destination])}:/out"
docker_env = {
  'S3_BUCKET' => options[:bucket],
  'S3_KEY' => options[:key],
  'DESTINATION' => destination
}
docker_env['MODE'] = options[:mode] if options[:mode]
docker_env['INTERVAL'] = options[:interval] if options[:interval]
docker_env['OWNER_UID'] = options[:user] if options[:user]
docker_env['OWNER_GID'] = options[:group] if options[:group]
docker_env['AWS_ACCESS_KEY_ID'] = ENV['AWS_ACCESS_KEY_ID'] if ENV['AWS_ACCESS_KEY_ID']
docker_env['AWS_SECRET_ACCESS_KEY'] = ENV['AWS_SECRET_ACCESS_KEY'] if ENV['AWS_SECRET_ACCESS_KEY']

cmd = [
  "docker run",
  "-v #{volume}",
  "--rm"
]
cmd << "--name #{options[:name]}" if options[:name]
cmd += docker_env.map{|k,v| "-e #{k}=#{v}" }
cmd << options[:image]

if options[:dryrun]
  puts cmd.join(' ')
else
  exec cmd.join(' ')
end
